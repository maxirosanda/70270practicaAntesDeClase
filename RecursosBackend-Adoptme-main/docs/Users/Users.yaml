paths:
  /api/users/:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        "200":
          description: Los usuarios fueron obtenidos satisfactoriamente de la base de datos
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
  /api/users/{uid}:
    get:
      summary: Obtiene un usuario por su id
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a obtener
          schema:
            type: string
      responses:
        "200":
          description: El usuario fue obtenido satisfactoriamente de la base de datos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: El usuario con el id especificado no fue encontrado en la base de datos
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
    put:
      summary: Actualiza un usuario por su id
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: Id del usuario a actualizar
          schema:
            type: string
        - in: body
          name: body
          required: true
          description: Campos a actualizar del usuario
          schema:
            $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: El usuario fue actualizado satisfactoriamente en la base de datos
          content:
            application/json:
              example:
                status: "success"
                message: "User updated"
        "404":
          description: El usuario con el id especificado no fue encontrado en la base de datos
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
    delete:
      summary: Elimina un usuario por su id
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: Id del usuario a eliminar
          schema:
            type: string
      responses:
        "200":
          description: El usuario fue eliminado satisfactoriamente de la base de datos
          content:
            application/json:
              example:
                status: "success"
                message: "User deleted"
        "404":
          description: El usuario con el id especificado no fue encontrado en la base de datos
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos

components:
  schemas:
    User:
      type: object
      properties:
            _id:
              type: string
              description: Id autogenerado de mongo
            first_name:
              type: string
              description: Nombre del usuario
            last_name:
              type: string
              description: Apellido del usuario
            email:
              type: string
              description: Correo del usuario, este campo es único
            password:
              type: string
              description: Contraseña Hasheada del usuario
            role:
              type: string
              description: Rol del usuario
            pets:
              type: array
              items:
                type: string
              description: Lista de mascotas del usuario
            __v:
              type: integer
              description: Versión del documento en MongoDB
      example:
        _id: "67bcb79ca9340155067601fa"
        first_name: "maxi"
        last_name: "rosanda"
        email: "maxi_rosandahtomail.com"
        password: "123"
        role: "admin"
        pets: ["67bcb79ca9340155067601fa"]
        __v: 0

  requestBodies:
    updateUser:
      type: object
      properties:
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo del usuario, este campo es único
        password:
          type: String
          description: Contraseña Hasheada del usuario.
      example:
        first_name: Mauricio
        last_name: Espinosa
        email: mauricioEspinosa@correo.com
        password: 123
